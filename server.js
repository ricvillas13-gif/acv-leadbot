import express from "express";
import bodyParser from "body-parser";
import { google } from "googleapis";

// ===== CONFIGURACI√ìN INICIAL =====
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

const creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
const SHEET_ID = process.env.GOOGLE_SHEET_ID; // ID real de la hoja "Leads"

// Autenticaci√≥n con Google
const auth = new google.auth.GoogleAuth({
  credentials: creds,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const sheets = google.sheets({ version: "v4", auth });

// ===== ESTADOS TEMPORALES DE USUARIO =====
const session = {};

// ===== FLUJO DE PREGUNTAS =====
const steps = [
  "Cliente",
  "Garant√≠a",
  "Monto solicitado",
  "Procedencia de lead",
  "Ubicaci√≥n",
  "Cita",
  "Lugar",
  "Fotos",
];

// ===== LISTAS =====
const garantias = ["Auto", "Inmueble", "Maquinaria", "Reloj"];
const procedencias = [
  "Referido",
  "Anuncio en l√≠nea",
  "Evento",
  "B√∫squeda org√°nica",
  "Publicidad Facebook",
  "Publicidad Instagram",
  "Campa√±a WhatsApp",
  "Formulario Facebook",
  "Campa√±a Messenger",
  "Ninguno",
];
const ubicaciones = [
  "Aguascalientes", "Baja California", "Campeche", "CDMX", "Chiapas",
  "Chihuahua", "Coahuila", "Colima", "Durango", "Estado de M√©xico",
  "Guanajuato", "Guerrero", "Hidalgo", "Jalisco", "Michoac√°n",
  "Morelos", "Nayarit", "Nuevo Le√≥n", "Oaxaca", "Puebla", "Quer√©taro",
  "Quintana Roo", "San Luis Potos√≠", "Sinaloa", "Sonora", "Tabasco",
  "Tamaulipas", "Tlaxcala", "Veracruz", "Yucat√°n", "Zacatecas"
];
const lugares = ["Corporativo", "Patio de resguardo 1", "Patio de resguardo 2"];

// ===== UTILIDADES =====
function nextStep(phone) {
  const current = session[phone]?.step || 0;
  return steps[current];
}
function advanceStep(phone) {
  session[phone].step++;
}
function resetSession(phone) {
  session[phone] = { step: 0, data: {} };
}

// ===== TWILIO WEBHOOK =====
app.post("/twilio", async (req, res) => {
  try {
    const from = req.body.From || "";
    const body = (req.body.Body || "").trim();
    const mediaCount = Number(req.body.NumMedia || 0);

    if (!from) return res.type("text/xml").send("<Response><Message>Error: sin remitente.</Message></Response>");
    if (!session[from]) resetSession(from);

    const step = nextStep(from);
    const data = session[from].data;

    if (mediaCount > 0) {
      data.Fotos = data.Fotos || [];
      for (let i = 0; i < mediaCount; i++) {
        data.Fotos.push(req.body[`MediaUrl${i}`]);
      }
      advanceStep(from);
    } else {
      switch (step) {
        case "Cliente":
          data.Cliente = body;
          advanceStep(from);
          break;
        case "Garant√≠a":
          if (!garantias.includes(body)) {
            return res
              .type("text/xml")
              .send(`<Response><Message>Selecciona una garant√≠a: ${garantias.join(", ")}</Message></Response>`);
          }
          data.Garant√≠a = body;
          advanceStep(from);
          break;
        case "Monto solicitado":
          data["Monto solicitado"] = body.replace(/[^\d.]/g, "");
          advanceStep(from);
          break;
        case "Procedencia de lead":
          if (!procedencias.includes(body)) {
            return res
              .type("text/xml")
              .send(`<Response><Message>Selecciona una procedencia v√°lida: ${procedencias.join(", ")}</Message></Response>`);
          }
          data["Procedencia de lead"] = body;
          advanceStep(from);
          break;
        case "Ubicaci√≥n":
          if (!ubicaciones.includes(body)) {
            return res
              .type("text/xml")
              .send(`<Response><Message>Selecciona un estado v√°lido: ${ubicaciones.join(", ")}</Message></Response>`);
          }
          data.Ubicaci√≥n = body;
          advanceStep(from);
          break;
        case "Cita":
          data.Cita = body;
          advanceStep(from);
          break;
        case "Lugar":
          if (!lugares.includes(body)) {
            return res
              .type("text/xml")
              .send(`<Response><Message>Selecciona un lugar v√°lido: ${lugares.join(", ")}</Message></Response>`);
          }
          data.Lugar = body;
          advanceStep(from);
          break;
      }
    }

    // Si complet√≥ el flujo:
    if (session[from].step >= steps.length) {
      data["Fecha de contacto"] = new Date().toLocaleString("es-MX");
      data["Etapa del cliente"] = "contacto inicial";
      data["Responsable"] = "Bot";
      data["Resultado final"] = "Pendiente";
      data["Canal de contacto"] = "WhatsApp"; // üëà nuevo campo autom√°tico

      await sheets.spreadsheets.values.append({
        spreadsheetId: SHEET_ID,
        range: "Leads!A1",
        valueInputOption: "USER_ENTERED",
        requestBody: {
          values: [
            [
              data["Fecha de contacto"],
              data.Cliente,
              data.Garant√≠a,
              data["Monto solicitado"],
              data["Procedencia de lead"],
              data.Ubicaci√≥n,
              data.Cita,
              data.Lugar,
              data.Responsable,
              data["Etapa del cliente"],
              data["Resultado final"],
              data["Canal de contacto"],
              data.Fotos?.join(", ") || "",
            ],
          ],
        },
      });

      resetSession(from);
      return res
        .type("text/xml")
        .send(`<Response><Message>‚úÖ Gracias ${data.Cliente}, registramos tu informaci√≥n correctamente.</Message></Response>`);
    }

    // Pregunta siguiente paso
    const next = nextStep(from);
    return res.type("text/xml").send(`<Response><Message>${promptFor(next)}</Message></Response>`);
  } catch (err) {
    console.error(err);
    res.type("text/xml").send("<Response><Message>‚ö†Ô∏è Ocurri√≥ un error en el bot.</Message></Response>");
  }
});

// ===== FUNCIONES DE TEXTO =====
function promptFor(step) {
  switch (step) {
    case "Cliente":
      return "üëã Hola, ¬øc√≥mo te llamas?";
    case "Garant√≠a":
      return `¬øQu√© tipo de garant√≠a ofrecer√≠as? (${garantias.join(", ")})`;
    case "Monto solicitado":
      return "¬øCu√°l es el monto que deseas solicitar?";
    case "Procedencia de lead":
      return `¬øC√≥mo nos encontraste? (${procedencias.join(", ")})`;
    case "Ubicaci√≥n":
      return `¬øEn qu√© estado de la Rep√∫blica te encuentras?`;
    case "Cita":
      return "¬øQu√© d√≠a y hora te gustar√≠a agendar una cita?";
    case "Lugar":
      return `¬øD√≥nde prefieres la cita? (${lugares.join(", ")})`;
    case "Fotos":
      return "üì∏ Por favor, env√≠ame 3 fotos de la garant√≠a.";
    default:
      return "Gracias por tu inter√©s. Te contactaremos pronto.";
  }
}

// ===== INICIO DEL SERVIDOR =====
const PORT = process.env.PORT || 10000;
app.get("/", (req, res) => {
  res.send("‚úÖ LeadBot ACV operativo y conectado a Google Sheets.");
});
app.listen(PORT, () => console.log(`üöÄ Servidor activo en el puerto ${PORT}`));
